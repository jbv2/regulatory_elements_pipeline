setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
## Load libraries
library("ggplot2")
library("dplyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly=TRUE)
Load data frame
GH_variants <- read.table(file = "test/data/sample_GH_variants.filtered.tsv", header = TRUE)
View(GH_variants)
View(GH_variants)
# Load data frame
GH_variants <- read.table(file = "test/data/sample_GH_variants.filtered.tsv", header = TRUE)
View(GH_variants)
# Load data frame
GH_variants <- read.table(file = "test/data/sample_GH_variants.filtered.tsv", header = TRUE, sep = "\t")
# Define input and outputs
input_file <- "test/data/sample_GH_variants.filtered.tsv"
# Load data frame
GH_variants <- read.table(file = input_file, header = TRUE, sep = "\t")
# Define input and outputs
input_file <- "test/data/sample_GH_variants.filtered.tsv"
# Load data frame
GH_variants <- read.table(file = input_file, header = TRUE, sep = "\t")
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
# Define input and outputs
input_file <- "test/data/sample_GH_variants.filtered.tsv"
# Load data frame
GH_variants <- read.table(file = input_file, header = TRUE, sep = "\t")
## Load libraries
library("ggplot2")
library("dplyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Define input and outputs
input_file <- args[1]
# output_file <- args[2]
# Load data frame
GH_variants <- read.table(file = input_file, header = TRUE, sep = "\t")
# For Debbuging only
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Define input and outputs
input_file <- args[1]
# Load data frame
GH_variants.df <- read.table(file = input_file, header = TRUE, sep = "\t")
source('/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary/summarizer.R', echo=TRUE)
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
## Load libraries
library("ggplot2")
library("dplyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
# For Debbuging only
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
#args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
#args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Define input and outputs
input_file <- args[1]
output_file <- args[2]
# Load data frame
GH_variants.df <- read.table(file = input_file, header = TRUE, sep = "\t")
# Data handling
output.df <- GH_variants.df
# Save output
write.table(x = output.df, file = output_file, append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE, col.names = T)
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
## Load libraries
library("ggplot2")
library("dplyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
# For Debbuging only
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
#args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
#args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Define input and outputs
input_file <- args[1]
output_file <- args[2]
# Load data frame
GH_variants.df <- read.table(file = input_file, header = TRUE, sep = "\t")
# Data handling
output.df <- GH_variants.df
# Save output
write.table(x = output.df, file = output_file, append = FALSE, quote = FALSE, sep = "\t", row.names = FALSE, col.names = T)
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
setwd("/mnt/Almacenamiento/Documents/regulatory_elements_pipeline/mkmodules/mk-variant-summary")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
## Load libraries
library("ggplot2")
library("dplyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
# For Debbuging only
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Define input and outputs
input_file <- args[1]
output_file <- args[2]
# Load data frame
GH_variants.df <- read.table(file = input_file, header = TRUE, sep = "\t")
View(GH_variants.df)
# Data handling
# select only useful columns
#genehancer_data.df <-
GH_variants.df
# Data handling
# select only useful columns
#genehancer_data.df <-
GH_variants.df %>% select(ID,GeneHancer_type_and_Genes)
# Data handling
# select only useful columns
#genehancer_data.df <-
GH_variants.df %>% select(ID,GeneHancer_type_and_Genes) %>& gene_hancer.df
# Data handling
# select only useful columns
genehancer_data.df <- GH_variants.df %>% select(ID,GeneHancer_type_and_Genes)
View(genehancer_data.df)
library (tidyr)
# separate genehancer column
genehancer_data.df %>% separate(col = GeneHancer_type_and_Genes, into = c("GeneHancerID", "Type", "Gene"), sep = "_")
# separate genehancer column
genehancer_data.df %>% separate(col = GeneHancer_type_and_Genes, into = c("GeneHancerID", "Type", "Gene"), sep = "_", remove = FALSE)
# separate genehancer column
split_cols_genehancer_data.df <- genehancer_data.df %>% separate(col = GeneHancer_type_and_Genes, into = c("GeneHancerID", "Type", "Gene"), sep = "_", remove = FALSE)
View(split_cols_genehancer_data.df)
# separate genehancer column
split_cols_genehancer_data.df <- genehancer_data.df %>% separate(col = GeneHancer_type_and_Genes, into = c("GeneHancerID", "Type", "Gene"), sep = "_", remove = TRUE)
View(genehancer_data.df)
View(split_cols_genehancer_data.df)
# separate genehancer column
split_cols_genehancer_data.df <- genehancer_data.df %>%
separate(col = GeneHancer_type_and_Genes,
into = c("GeneHancerID", "Type", "Gene"),
sep = "_",
remove = FALSE)
View(split_cols_genehancer_data.df)
# separate genehancer column
split_cols_genehancer_data.df <- genehancer_data.df %>%
separate(col = GeneHancer_type_and_Genes,
into = c("GeneHancerID", "Type", "Gene"),
sep = "_",
remove = TRUE)
split_cols_genehancer_data.df <- genehancer_data.df %>%
separate(col = GeneHancer_type_and_Genes,
into = c("GeneHancerID", "Type", "Gene"),
sep = "_",
remove = TRUE)
View(split_cols_genehancer_data.df)
# count the number of variants per GeneHancerID
split_cols_genehancer_data.df %>% group_by(GeneHancerID)
# count the number of variants per GeneHancerID
split_cols_genehancer_data.df %>% group_by(GeneHancerID) %>% summarise( number_of_variants = n() )
# count the number of variants per GeneHancerID
variants per GeneHancerID <- split_cols_genehancer_data.df %>%
group_by(GeneHancerID) %>%
summarise( number_of_variants = n() )
# count the number of variants per GeneHancerID
variants_per_GeneHancerID <- split_cols_genehancer_data.df %>%
group_by(GeneHancerID) %>%
summarise( number_of_variants = n() )
View(variants_per_GeneHancerID)
typeof(variants_per_GeneHancerID)
variants_per_GeneHancerID.df <- split_cols_genehancer_data.df %>%
group_by(GeneHancerID) %>%
summarise( number_of_variants = n() )
variants_per_GeneHancerID.df <- split_cols_genehancer_data.df %>%
group_by(GeneHancerID) %>%
summarise( number_of_variants = n() )
## Load libraries
library("ggplot2")
library("dplyr")
library ("tidyr")
#starting args object to recieve arguments from command line
#solution taken from https://www.r-bloggers.com/passing-arguments-to-an-r-script-from-command-lines/
args = commandArgs(trailingOnly = TRUE)
message("Voy a imprimir los archivos recibidos por R")
print(args)
# For Debbuging only
# Comentar estas líneas cuando el script pase a producción
#args[1] is the prerq file
args[1] <- "test/data/sample_GH_variants.filtered.tsv"
#args[2] is the target file
args[2] <- "test/data/sample_GH_variants.filtered.summary.tsv"
# Make lolliplot plot
# Define input and outputs
input_file <- args[1]
output_file <- args[2]
# Load data frame
GH_variants.df <- read.table(file = input_file,
header = TRUE, sep = "\t")
# Data handling
# select only useful columns
genehancer_data.df <- GH_variants.df %>%
select(ID,
GeneHancer_type_and_Genes)
# separate genehancer column
split_cols_genehancer_data.df <- genehancer_data.df %>%
separate(col = GeneHancer_type_and_Genes,
into = c("GeneHancerID", "Type", "Gene"),
sep = "_",
remove = TRUE)
# count the number of variants per GeneHancerID
variants_per_GeneHancerID.df <- split_cols_genehancer_data.df %>%
group_by(GeneHancerID) %>%
summarise( number_of_variants = n() )
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants))
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar()
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity")
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity") +
geom_point()
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity") +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity", size = 1) +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity", size = 0.5) +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity", lwd = 0.2) +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity", lwd = 0.2) +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity", width = 0.2) +
geom_point(size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity",
width = 0.2) +
geom_point(size = 5) +
theme(axis.text.x = element_text(angle = 90))
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity",
width = 0.2) +
geom_point(size = 5) +
theme(axis.text.x = element_text(angle = 90),
size = 5)
size = 5)
theme(axis.text.x = element_text(angle = 90, size = 5)
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity",
width = 0.2) +
geom_point(size = 5) +
theme(axis.text.x = element_text(angle = 90, size = 5))
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity",
width = 0.2) +
geom_point(size = 5) +
theme(axis.text.x = element_text(angle = 90,
size = 5) )
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)) +
geom_bar(stat = "identity",
width = 0.2) +
geom_point(size = 5) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90,
size = 5) )
# Make lolliplot plot
ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)
) +
geom_bar(stat = "identity",
width = 0.2,
color = "royalblue") +
geom_point(size = 5, color = "gray") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90,
size = 5)
)
# Save output
write.table(x = variants_per_GeneHancerID.df,
file = output_file,
append = FALSE,
quote = FALSE,
sep = "\t",
row.names = FALSE,
col.names = T)
# Make lolliplot plot
lolliplot.p <- ggplot(data = variants_per_GeneHancerID.df,
aes(x = GeneHancerID,
y = number_of_variants)
) +
geom_bar(stat = "identity",
width = 0.2,
color = "royalblue") +
geom_point(size = 5,
color = "gray") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90,
size = 5)
)
View(lolliplot.p)
# Save lollipop plot
# Create dynamic name for output plot
output_file
# Save lollipop plot
# Create dynamic name for output plot
output_file %>% gsub(pattern = ".tsv", replacement = ".png")
# Save lollipop plot
# Create dynamic name for output plot
output_file %>% gsub(pattern = ".tsv",
replacement = "_lollipop_plot.png")
# Save lollipop plot
# Create dynamic name for output plot
output_lollipop_plot <- output_file %>% gsub(pattern = ".tsv",
replacement = "_lollipop_plot.png")
#Save plot
ggsave(output_lollipop_plot)
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lolipop.p,
device = "png")
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lollipop.p,
device = "png")
lolliplot.p
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lollipop.p,
device = "png")
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lolliplop.p,
device = "png")
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lolliplot.p,
device = "png")
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lolliplot.p,
device = "png",
width = 10.8,
height = 7.2,
units = "cm",
dpi = 300)
)
#Save plot
ggsave(filename = output_lollipop_plot,
plot = lolliplot.p,
device = "png",
width = 10.8,
height = 7.2,
units = "cm",
dpi = 300)
